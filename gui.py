
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLineEdit
from PyQt5.QtWidgets import QTableWidgetItem


import kenken as ken
import csp as csp
from time import time

import sys
import random


class Ui_MainWindow(object):
    cagelist = []
    pointss = {}
    logs=""
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1173, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 10, 641, 441))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 490, 31, 20))
        self.lineEdit.setInputMask("")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(500, 500, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(590, 500, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 460, 161, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 490, 47, 13))
        self.label_2.setObjectName("label_2")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(250, 490, 82, 17))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(250, 510, 201, 17))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(250, 530, 191, 17))
        self.radioButton_3.setObjectName("radioButton_3")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(220, 460, 141, 20))
        self.label_3.setObjectName("label_3")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(800, 60, 301, 251))
        self.textEdit.setObjectName("textEdit")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(800, 30, 201, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(800, 360, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1030, 360, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1173, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pushButton.clicked.connect(self.generate)
        self.pushButton_2.clicked.connect(self.Solve)
        self.pushButton_3.clicked.connect(self.bench)
        self.pushButton_4.clicked.connect(self.clearlog)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Generate"))
        self.pushButton_2.setText(_translate("MainWindow", "Solve!"))
        self.label.setText(_translate("MainWindow", "Please enter size of the board "))
        self.label_2.setText(_translate("MainWindow", "size"))
        self.radioButton.setText(_translate("MainWindow", "Backtracking"))
        self.radioButton_2.setText(_translate("MainWindow", "Backtracking with forward chwecking"))
        self.radioButton_3.setText(_translate("MainWindow", "Backtracking with arc consistency"))
        self.label_3.setText(_translate("MainWindow", "Choose solving algorithm!"))
        self.label_4.setText(_translate("MainWindow", "Benchmark Report"))
        self.pushButton_3.setText(_translate("MainWindow", "Benchmark"))
        self.pushButton_4.setText(_translate("MainWindow", "Clear Log!"))

    def generate(self):


        size = int(self.lineEdit.text())
        self.tableWidget.setColumnCount(size)
        self.tableWidget.setRowCount(size)

        sizes, cliques = ken.generate(size)
        self.board = ken.Kenken(sizes, cliques)
                cages = cliques

        self.globalcage=cages

        cage_list = []
        for cage in cages:
            cage_x = []
            cage_y = []

            color = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)
            for point in cage[0]:
                cage_x.append(point[0])
                cage_y.append(point[1])


            cage_list.append({"name": str(cage[1]) + str(cage[2]), "color": color, "x": cage_x, "y": cage_y})

        # points = {}
        # for indx in range(len(val)):
        #     points[(xcord[indx], ycord[indx])] = val[indx]

        for cage in cage_list:

            flag = 0
            for indx in range(len(cage["x"])):
                coord = (cage["x"][indx], cage["y"][indx])
                if flag == 0:

                    self.tableWidget.setItem((cage["x"][indx] - 1), (cage["y"][indx] - 1),QTableWidgetItem(cage["name"] + "     " ))
                    self.tableWidget.item((cage["x"][indx] - 1), (cage["y"][indx] - 1)).setBackground(
                        QtGui.QColor(cage["color"][0], cage["color"][1], cage["color"][2]))
                    flag = 1
                else:
                    self.tableWidget.setItem((cage["x"][indx] - 1), (cage["y"][indx] - 1),QTableWidgetItem())
                    self.tableWidget.item((cage["x"][indx] - 1), (cage["y"][indx] - 1)).setBackground(
                        QtGui.QColor(cage["color"][0], cage["color"][1], cage["color"][2]))
        self.cagelist=cage_list
        # self.pointss=points


        self.tableWidget.resizeColumnsToContents()

    def Solve(self):

        size = int(self.lineEdit.text())

        self.tableWidget.setColumnCount(size)
        self.tableWidget.setRowCount(size)
        #
        # sizes, cliques = ken.generate(size)
        # board = ken.Kenken(sizes, cliques)

        if self.radioButton.isChecked():
            dt = time()

            assignment = csp.backtracking_search(self.board)

            dt = time() - dt

            self.logs += "Backtracking search algorithm time taken is " + str(dt) + "\n"

        if self.radioButton_2.isChecked():
            dt = time()

            assignment = csp.backtracking_search(self.board, inference=csp.forward_checking)

            dt = time() - dt

            self.logs += "Backtracking search with forward checking algorithm time taken is " + str(dt) + "\n"

        if self.radioButton_3.isChecked():
            dt = time()

            assignment = csp.backtracking_search(self.board, inference=csp.mac)

            dt = time() - dt

            self.logs += "Backtracking search with arc consistency algorithm time taken is " + str(dt) + "\n"

        d = assignment

        # board.display(assignment)

        keys = list(assignment.keys())
        xcord = []
        ycord = []
        val = []
        for key in keys:
            for point in key:
                xcord.append(point[0])
                ycord.append(point[1])
            values = assignment[key]
            for value in values:
                val.append(value)

        cages = self.globalcage

        cage_list = []
        for cage in cages:
            cage_x = []
            cage_y = []

            color = random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)
            for point in cage[0]:
                cage_x.append(point[0])
                cage_y.append(point[1])

            cage_list.append({"name": str(cage[1]) + str(cage[2]), "color": color, "x": cage_x, "y": cage_y})

        points = {}
        for indx in range(len(val)):
            points[(xcord[indx], ycord[indx])] = val[indx]




        for cage in cage_list:

            flag=0
            for indx in range(len(cage["x"])):
                coord=(cage["x"][indx], cage["y"][indx])
                if flag == 0:

                    self.tableWidget.setItem((cage["x"][indx]-1), (cage["y"][indx]-1),QTableWidgetItem("("+cage["name"]+")"+"   "+str(points[coord])))
                    self.tableWidget.item((cage["x"][indx]-1), (cage["y"][indx]-1)).setBackground(QtGui.QColor(cage["color"][0],cage["color"][1],cage["color"][2]))
                    flag=1
                else:
                    self.tableWidget.setItem((cage["x"][indx] - 1), (cage["y"][indx] - 1),
                                             QTableWidgetItem("  " + "     " + str(points[coord])))
                    self.tableWidget.item((cage["x"][indx] - 1), (cage["y"][indx] - 1)).setBackground(
                        QtGui.QColor(cage["color"][0], cage["color"][1], cage["color"][2]))

        self.tableWidget.resizeColumnsToContents()

    def clearlog(self):
        self.logs=""
        self.textEdit.setText(self.logs)

    def bench(self):

        self.textEdit.setText(self.logs)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
  
